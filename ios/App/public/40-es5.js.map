{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"names":["VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","component","params","state","container","element","delegate","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","currentParams","keysA","Object","keys","keysB","length","key","convertToView","page","convertToViews","pages","map","filter","v","navCss","Nav","hostRef","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","ionNavWillLoad","ionNavWillChange","ionNavDidChange","gesture","enable","swipeGesture","root","setRoot","rootParams","document","querySelector","el","closest","mode","getBoolean","emit","rootChanged","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","swipeGestureChanged","_destroy","destroy","componentProps","opts","done","queueTrns","insertStart","insertViews","insertIndex","insertComponents","removeStart","removeCount","indexOrViewCtrl","tiConfig","removeView","startIndex","setPages","direction","active","getActiveSync","Promise","resolve","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","viewController","find","popTo","assign","push","tagName","index","canGoBackSync","getPreviousSync","indexOf","ti","skipIfBusy","reject","nextTrns","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","router","navChanged","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","init","postViewInit","enteringRequiresTransition","leavingRequiresTransition","transition","success","failed","viewsLength","viewControllers","removeEnd","i","destroyQueue","finalBalance","console","warn","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","animationBuilder","animation","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","style","navLink","routerDirection","pop","NavLink","onClick"],"mappings":"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","file":"40-es5.js","sourcesContent":["import { r as registerInstance, d as createEvent, h, e as getElement, H as Host } from './index-e23c3ffd.js';\nimport { b as getIonMode, c as config } from './ionic-global-fbc9a2ac.js';\nimport { b as assert } from './helpers-5c745fbd.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-b60886e1.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-685f606a.js';\nimport { a as attachComponent } from './framework-delegate-d1eb6504.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n    constructor(component, params) {\n        this.component = component;\n        this.params = params;\n        this.state = VIEW_STATE_NEW;\n    }\n    async init(container) {\n        this.state = VIEW_STATE_ATTACHED;\n        if (!this.element) {\n            const component = this.component;\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n        }\n    }\n    /**\n     * DOM WRITE\n     */\n    _destroy() {\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n        const element = this.element;\n        if (element) {\n            if (this.delegate) {\n                this.delegate.removeViewFromDom(element.parentElement, element);\n            }\n            else {\n                element.remove();\n            }\n        }\n        this.nav = undefined;\n        this.state = VIEW_STATE_DESTROYED;\n    }\n}\nconst matches = (view, id, params) => {\n    if (!view) {\n        return false;\n    }\n    if (view.component !== id) {\n        return false;\n    }\n    const currentParams = view.params;\n    if (currentParams === params) {\n        return true;\n    }\n    if (!currentParams && !params) {\n        return true;\n    }\n    if (!currentParams || !params) {\n        return false;\n    }\n    const keysA = Object.keys(currentParams);\n    const keysB = Object.keys(params);\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    // Test for A's keys different from B.\n    for (const key of keysA) {\n        if (currentParams[key] !== params[key]) {\n            return false;\n        }\n    }\n    return true;\n};\nconst convertToView = (page, params) => {\n    if (!page) {\n        return null;\n    }\n    if (page instanceof ViewController) {\n        return page;\n    }\n    return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n    return pages.map(page => {\n        if (page instanceof ViewController) {\n            return page;\n        }\n        if ('page' in page) {\n            return convertToView(page.page, page.params);\n        }\n        return convertToView(page, undefined);\n    }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.transInstr = [];\n        this.animationEnabled = true;\n        this.useRouter = false;\n        this.isTransitioning = false;\n        this.destroyed = false;\n        this.views = [];\n        /**\n         * If `true`, the nav should animate the transition of components.\n         */\n        this.animated = true;\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    }\n    swipeGestureChanged() {\n        if (this.gesture) {\n            this.gesture.enable(this.swipeGesture === true);\n        }\n    }\n    rootChanged() {\n        if (this.root !== undefined) {\n            if (!this.useRouter) {\n                this.setRoot(this.root, this.rootParams);\n            }\n        }\n    }\n    componentWillLoad() {\n        this.useRouter =\n            !!document.querySelector('ion-router') &&\n                !this.el.closest('[no-router]');\n        if (this.swipeGesture === undefined) {\n            const mode = getIonMode(this);\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n        }\n        this.ionNavWillLoad.emit();\n    }\n    async componentDidLoad() {\n        this.rootChanged();\n        this.gesture = (await import('./swipe-back-7b4b8b66.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n        this.swipeGestureChanged();\n    }\n    componentDidUnload() {\n        for (const view of this.views) {\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            view._destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        // release swipe back gesture and transition\n        this.transInstr.length = this.views.length = 0;\n        this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    push(component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: -1,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insert(insertIndex, component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insertPages(insertIndex, insertComponents, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: insertComponents,\n            opts\n        }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    pop(opts, done) {\n        return this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts\n        }, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popTo(indexOrViewCtrl, opts, done) {\n        const tiConfig = {\n            removeStart: -1,\n            removeCount: -1,\n            opts\n        };\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n            tiConfig.removeView = indexOrViewCtrl;\n            tiConfig.removeStart = 1;\n        }\n        else if (typeof indexOrViewCtrl === 'number') {\n            tiConfig.removeStart = indexOrViewCtrl + 1;\n        }\n        return this.queueTrns(tiConfig, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popToRoot(opts, done) {\n        return this.queueTrns({\n            removeStart: 1,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    removeIndex(startIndex, removeCount = 1, opts, done) {\n        return this.queueTrns({\n            removeStart: startIndex,\n            removeCount,\n            opts\n        }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setRoot(component, componentProps, opts, done) {\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setPages(views, opts, done) {\n        if (opts == null) {\n            opts = {};\n        }\n        // if animation wasn't set to true then default it to NOT animate\n        if (opts.animated !== true) {\n            opts.animated = false;\n        }\n        return this.queueTrns({\n            insertStart: 0,\n            insertViews: views,\n            removeStart: 0,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /** @internal */\n    setRouteId(id, params, direction) {\n        const active = this.getActiveSync();\n        if (matches(active, id, params)) {\n            return Promise.resolve({\n                changed: false,\n                element: active.element\n            });\n        }\n        let resolve;\n        const promise = new Promise(r => (resolve = r));\n        let finish;\n        const commonOpts = {\n            updateURL: false,\n            viewIsReady: enteringEl => {\n                let mark;\n                const p = new Promise(r => (mark = r));\n                resolve({\n                    changed: true,\n                    element: enteringEl,\n                    markVisible: async () => {\n                        mark();\n                        await finish;\n                    }\n                });\n                return p;\n            }\n        };\n        if (direction === 'root') {\n            finish = this.setRoot(id, params, commonOpts);\n        }\n        else {\n            const viewController = this.views.find(v => matches(v, id, params));\n            if (viewController) {\n                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back' }));\n            }\n            else if (direction === 'forward') {\n                finish = this.push(id, params, commonOpts);\n            }\n            else if (direction === 'back') {\n                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true }));\n            }\n        }\n        return promise;\n    }\n    /** @internal */\n    async getRouteId() {\n        const active = this.getActiveSync();\n        return active\n            ? {\n                id: active.element.tagName,\n                params: active.params,\n                element: active.element\n            }\n            : undefined;\n    }\n    /**\n     * Get the active view.\n     */\n    getActive() {\n        return Promise.resolve(this.getActiveSync());\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    getByIndex(index) {\n        return Promise.resolve(this.views[index]);\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    canGoBack(view) {\n        return Promise.resolve(this.canGoBackSync(view));\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    getPrevious(view) {\n        return Promise.resolve(this.getPreviousSync(view));\n    }\n    getLength() {\n        return this.views.length;\n    }\n    getActiveSync() {\n        return this.views[this.views.length - 1];\n    }\n    canGoBackSync(view = this.getActiveSync()) {\n        return !!(view && this.getPreviousSync(view));\n    }\n    getPreviousSync(view = this.getActiveSync()) {\n        if (!view) {\n            return undefined;\n        }\n        const views = this.views;\n        const index = views.indexOf(view);\n        return index > 0 ? views[index - 1] : undefined;\n    }\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n    queueTrns(ti, done) {\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n            return Promise.resolve(false);\n        }\n        const promise = new Promise((resolve, reject) => {\n            ti.resolve = resolve;\n            ti.reject = reject;\n        });\n        ti.done = done;\n        // Normalize empty\n        if (ti.insertViews && ti.insertViews.length === 0) {\n            ti.insertViews = undefined;\n        }\n        // Enqueue transition instruction\n        this.transInstr.push(ti);\n        // if there isn't a transition already happening\n        // then this will kick off this transition\n        this.nextTrns();\n        return promise;\n    }\n    success(result, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        if (ti.done) {\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n        }\n        ti.resolve(result.hasCompleted);\n        if (ti.opts.updateURL !== false && this.useRouter) {\n            const router = document.querySelector('ion-router');\n            if (router) {\n                const direction = result.direction === 'back' ? 'back' : 'forward';\n                router.navChanged(direction);\n            }\n        }\n    }\n    failed(rejectReason, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        this.transInstr.length = 0;\n        this.fireError(rejectReason, ti);\n    }\n    fireError(rejectReason, ti) {\n        if (ti.done) {\n            ti.done(false, false, rejectReason);\n        }\n        if (ti.reject && !this.destroyed) {\n            ti.reject(rejectReason);\n        }\n        else {\n            ti.resolve(false);\n        }\n    }\n    nextTrns() {\n        // this is the framework's bread 'n butta function\n        // only one transition is allowed at any given time\n        if (this.isTransitioning) {\n            return false;\n        }\n        // there is no transition happening right now\n        // get the next instruction\n        const ti = this.transInstr.shift();\n        if (!ti) {\n            return false;\n        }\n        this.runTransition(ti);\n        return true;\n    }\n    async runTransition(ti) {\n        try {\n            // set that this nav is actively transitioning\n            this.ionNavWillChange.emit();\n            this.isTransitioning = true;\n            this.prepareTI(ti);\n            const leavingView = this.getActiveSync();\n            const enteringView = this.getEnteringView(ti, leavingView);\n            if (!leavingView && !enteringView) {\n                throw new Error('no views in the stack to be removed');\n            }\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n                await enteringView.init(this.el);\n            }\n            this.postViewInit(enteringView, leavingView, ti);\n            // Needs transition?\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n                enteringView !== leavingView;\n            const result = requiresTransition\n                ? await this.transition(enteringView, leavingView, ti)\n                : {\n                    // transition is not required, so we are already done!\n                    // they're inserting/removing the views somewhere in the middle or\n                    // beginning, so visually nothing needs to animate/transition\n                    // resolve immediately because there's no animation that's happening\n                    hasCompleted: true,\n                    requiresTransition: false\n                };\n            this.success(result, ti);\n            this.ionNavDidChange.emit();\n        }\n        catch (rejectReason) {\n            this.failed(rejectReason, ti);\n        }\n        this.isTransitioning = false;\n        this.nextTrns();\n    }\n    prepareTI(ti) {\n        const viewsLength = this.views.length;\n        ti.opts = ti.opts || {};\n        if (ti.opts.delegate === undefined) {\n            ti.opts.delegate = this.delegate;\n        }\n        if (ti.removeView !== undefined) {\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n            const index = this.views.indexOf(ti.removeView);\n            if (index < 0) {\n                throw new Error('removeView was not found');\n            }\n            ti.removeStart += index;\n        }\n        if (ti.removeStart !== undefined) {\n            if (ti.removeStart < 0) {\n                ti.removeStart = viewsLength - 1;\n            }\n            if (ti.removeCount < 0) {\n                ti.removeCount = viewsLength - ti.removeStart;\n            }\n            ti.leavingRequiresTransition =\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n        }\n        if (ti.insertViews) {\n            // allow -1 to be passed in to auto push it on the end\n            // and clean up the index if it's larger then the size of the stack\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n                ti.insertStart = viewsLength;\n            }\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n        }\n        const insertViews = ti.insertViews;\n        if (!insertViews) {\n            return;\n        }\n        assert(insertViews.length > 0, 'length can not be zero');\n        const viewControllers = convertToViews(insertViews);\n        if (viewControllers.length === 0) {\n            throw new Error('invalid views to insert');\n        }\n        // Check all the inserted view are correct\n        for (const view of viewControllers) {\n            view.delegate = ti.opts.delegate;\n            const nav = view.nav;\n            if (nav && nav !== this) {\n                throw new Error('inserted view was already inserted');\n            }\n            if (view.state === VIEW_STATE_DESTROYED) {\n                throw new Error('inserted view was already destroyed');\n            }\n        }\n        ti.insertViews = viewControllers;\n    }\n    getEnteringView(ti, leavingView) {\n        const insertViews = ti.insertViews;\n        if (insertViews !== undefined) {\n            // grab the very last view of the views to be inserted\n            // and initialize it as the new entering view\n            return insertViews[insertViews.length - 1];\n        }\n        const removeStart = ti.removeStart;\n        if (removeStart !== undefined) {\n            const views = this.views;\n            const removeEnd = removeStart + ti.removeCount;\n            for (let i = views.length - 1; i >= 0; i--) {\n                const view = views[i];\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n                    return view;\n                }\n            }\n        }\n        return undefined;\n    }\n    postViewInit(enteringView, leavingView, ti) {\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n        assert(ti.resolve, 'resolve must be valid');\n        assert(ti.reject, 'reject must be valid');\n        const opts = ti.opts;\n        const insertViews = ti.insertViews;\n        const removeStart = ti.removeStart;\n        const removeCount = ti.removeCount;\n        let destroyQueue;\n        // there are views to remove\n        if (removeStart !== undefined && removeCount !== undefined) {\n            assert(removeStart >= 0, 'removeStart can not be negative');\n            assert(removeCount >= 0, 'removeCount can not be negative');\n            destroyQueue = [];\n            for (let i = 0; i < removeCount; i++) {\n                const view = this.views[i + removeStart];\n                if (view && view !== enteringView && view !== leavingView) {\n                    destroyQueue.push(view);\n                }\n            }\n            // default the direction to \"back\"\n            opts.direction = opts.direction || 'back';\n        }\n        const finalBalance = this.views.length +\n            (insertViews !== undefined ? insertViews.length : 0) -\n            (removeCount !== undefined ? removeCount : 0);\n        assert(finalBalance >= 0, 'final balance can not be negative');\n        if (finalBalance === 0) {\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n            throw new Error('navigation stack needs at least one root page');\n        }\n        // At this point the transition can not be rejected, any throw should be an error\n        // there are views to insert\n        if (insertViews) {\n            // add the views to the\n            let insertIndex = ti.insertStart;\n            for (const view of insertViews) {\n                this.insertViewAt(view, insertIndex);\n                insertIndex++;\n            }\n            if (ti.enteringRequiresTransition) {\n                // default to forward if not already set\n                opts.direction = opts.direction || 'forward';\n            }\n        }\n        // if the views to be removed are in the beginning or middle\n        // and there is not a view that needs to visually transition out\n        // then just destroy them and don't transition anything\n        // batch all of lifecycles together\n        // let's make sure, callbacks are zoned\n        if (destroyQueue && destroyQueue.length > 0) {\n            for (const view of destroyQueue) {\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            }\n            // once all lifecycle events has been delivered, we can safely detroy the views\n            for (const view of destroyQueue) {\n                this.destroyView(view);\n            }\n        }\n    }\n    async transition(enteringView, leavingView, ti) {\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\n        // or if it is a portal (modal, actionsheet, etc.)\n        const opts = ti.opts;\n        const progressCallback = opts.progressAnimation\n            ? (ani) => this.sbAni = ani\n            : undefined;\n        const mode = getIonMode(this);\n        const enteringEl = enteringView.element;\n        const leavingEl = leavingView && leavingView.element;\n        const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n            leavingEl }, opts);\n        const { hasCompleted } = await transition(animationOpts);\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    }\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n        const cleanupView = hasCompleted ? enteringView : leavingView;\n        if (cleanupView) {\n            this.cleanup(cleanupView);\n        }\n        return {\n            hasCompleted,\n            requiresTransition: true,\n            enteringView,\n            leavingView,\n            direction: opts.direction\n        };\n    }\n    insertViewAt(view, index) {\n        const views = this.views;\n        const existingIndex = views.indexOf(view);\n        if (existingIndex > -1) {\n            // this view is already in the stack!!\n            // move it to its new location\n            assert(view.nav === this, 'view is not part of the nav');\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n        }\n        else {\n            assert(!view.nav, 'nav is used');\n            // this is a new view to add to the stack\n            // create the new entering view\n            view.nav = this;\n            // insert the entering view into the correct index in the stack\n            views.splice(index, 0, view);\n        }\n    }\n    removeView(view) {\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n        const views = this.views;\n        const index = views.indexOf(view);\n        assert(index > -1, 'view must be part of the stack');\n        if (index >= 0) {\n            views.splice(index, 1);\n        }\n    }\n    destroyView(view) {\n        view._destroy();\n        this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n    cleanup(activeView) {\n        // ok, cleanup time!! Destroy all of the views that are\n        // INACTIVE and come after the active view\n        // only do this if the views exist, though\n        if (this.destroyed) {\n            return;\n        }\n        const views = this.views;\n        const activeViewIndex = views.indexOf(activeView);\n        for (let i = views.length - 1; i >= 0; i--) {\n            const view = views[i];\n            const element = view.element;\n            if (i > activeViewIndex) {\n                // this view comes after the active view\n                // let's unload it\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n                this.destroyView(view);\n            }\n            else if (i < activeViewIndex) {\n                // this view comes before the active view\n                // and it is not a portal then ensure it is hidden\n                setPageHidden(element, true);\n            }\n        }\n    }\n    canStart() {\n        return (!!this.swipeGesture &&\n            !this.isTransitioning &&\n            this.transInstr.length === 0 &&\n            this.animationEnabled &&\n            this.canGoBackSync());\n    }\n    onStart() {\n        this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: {\n                direction: 'back',\n                progressAnimation: true\n            }\n        }, undefined);\n    }\n    onMove(stepValue) {\n        if (this.sbAni) {\n            this.sbAni.progressStep(stepValue);\n        }\n    }\n    onEnd(shouldComplete, stepValue, dur) {\n        if (this.sbAni) {\n            this.animationEnabled = false;\n            this.sbAni.onFinish(() => {\n                this.animationEnabled = true;\n            }, { oneTimeCallback: true });\n            // Account for rounding errors in JS\n            let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n            /**\n             * Animation will be reversed here, so need to\n             * reverse the easing curve as well\n             *\n             * Additionally, we need to account for the time relative\n             * to the new easing curve, as `stepValue` is going to be given\n             * in terms of a linear curve.\n             */\n            if (!shouldComplete) {\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n                newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n            }\n            else {\n                newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n            }\n            this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n        }\n    }\n    render() {\n        return (h(\"slot\", null));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n    }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps) => {\n    const nav = el.closest('ion-nav');\n    if (nav) {\n        if (routerDirection === 'forward') {\n            if (component !== undefined) {\n                return nav.push(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'root') {\n            if (component !== undefined) {\n                return nav.setRoot(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'back') {\n            return nav.pop({ skipIfBusy: true });\n        }\n    }\n    return Promise.resolve(false);\n};\n\nconst NavLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * The transition direction when navigating to another page.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = () => {\n            return navLink(this.el, this.routerDirection, this.component, this.componentProps);\n        };\n    }\n    render() {\n        return (h(Host, { onClick: this.onClick }));\n    }\n    get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"]}